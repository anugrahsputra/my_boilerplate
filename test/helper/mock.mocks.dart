// Mocks generated by Mockito 5.4.6 from annotations
// in my_boilerplate/test/helper/mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dio/dio.dart' as _i2;
import 'package:dio/src/dio_mixin.dart' as _i7;
import 'package:internet_connection_checker/internet_connection_checker.dart'
    as _i5;
import 'package:logging/logging.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:my_boilerplate/core/core.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponse_0<T> extends _i1.SmartFake implements _i2.Response<T> {
  _FakeResponse_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLogger_1 extends _i1.SmartFake implements _i3.Logger {
  _FakeLogger_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDio_2 extends _i1.SmartFake implements _i2.Dio {
  _FakeDio_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeNetworkRequestRetrier_3 extends _i1.SmartFake
    implements _i4.NetworkRequestRetrier {
  _FakeNetworkRequestRetrier_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeInternetConnectionChecker_4 extends _i1.SmartFake
    implements _i5.InternetConnectionChecker {
  _FakeInternetConnectionChecker_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFuture_5<T1> extends _i1.SmartFake implements _i6.Future<T1> {
  _FakeFuture_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeBaseOptions_6 extends _i1.SmartFake implements _i2.BaseOptions {
  _FakeBaseOptions_6(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeHttpClientAdapter_7 extends _i1.SmartFake
    implements _i2.HttpClientAdapter {
  _FakeHttpClientAdapter_7(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeTransformer_8 extends _i1.SmartFake implements _i2.Transformer {
  _FakeTransformer_8(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeInterceptors_9 extends _i1.SmartFake implements _i2.Interceptors {
  _FakeInterceptors_9(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDuration_10 extends _i1.SmartFake implements Duration {
  _FakeDuration_10(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAddressCheckResult_11 extends _i1.SmartFake
    implements _i5.AddressCheckResult {
  _FakeAddressCheckResult_11(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeInterceptorState_12<T> extends _i1.SmartFake
    implements _i7.InterceptorState<T> {
  _FakeInterceptorState_12(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ApiEndpoints].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiEndpoints extends _i1.Mock implements _i4.ApiEndpoints {}

/// A class which mocks [NetworkClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkClient extends _i1.Mock implements _i4.NetworkClient {
  @override
  _i6.Future<_i2.Response<dynamic>> get(
    String? url, {
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #get,
              [url],
              {
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
                #onReceiveProgress: onReceiveProgress,
              },
            ),
            returnValue: _i6.Future<_i2.Response<dynamic>>.value(
              _FakeResponse_0<dynamic>(
                this,
                Invocation.method(
                  #get,
                  [url],
                  {
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
            returnValueForMissingStub: _i6.Future<_i2.Response<dynamic>>.value(
              _FakeResponse_0<dynamic>(
                this,
                Invocation.method(
                  #get,
                  [url],
                  {
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
          )
          as _i6.Future<_i2.Response<dynamic>>);

  @override
  _i6.Future<_i2.Response<dynamic>> post(
    String? url, {
    Map<String, dynamic>? queryParameters,
    dynamic data,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
    _i2.ProgressCallback? onReceiveProgress,
    _i2.ProgressCallback? onSendProgress,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #post,
              [url],
              {
                #queryParameters: queryParameters,
                #data: data,
                #options: options,
                #cancelToken: cancelToken,
                #onReceiveProgress: onReceiveProgress,
                #onSendProgress: onSendProgress,
              },
            ),
            returnValue: _i6.Future<_i2.Response<dynamic>>.value(
              _FakeResponse_0<dynamic>(
                this,
                Invocation.method(
                  #post,
                  [url],
                  {
                    #queryParameters: queryParameters,
                    #data: data,
                    #options: options,
                    #cancelToken: cancelToken,
                    #onReceiveProgress: onReceiveProgress,
                    #onSendProgress: onSendProgress,
                  },
                ),
              ),
            ),
            returnValueForMissingStub: _i6.Future<_i2.Response<dynamic>>.value(
              _FakeResponse_0<dynamic>(
                this,
                Invocation.method(
                  #post,
                  [url],
                  {
                    #queryParameters: queryParameters,
                    #data: data,
                    #options: options,
                    #cancelToken: cancelToken,
                    #onReceiveProgress: onReceiveProgress,
                    #onSendProgress: onSendProgress,
                  },
                ),
              ),
            ),
          )
          as _i6.Future<_i2.Response<dynamic>>);

  @override
  _i6.Future<_i2.Response<dynamic>> put(
    String? url, {
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    dynamic data,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #put,
              [url],
              {
                #queryParameters: queryParameters,
                #options: options,
                #data: data,
              },
            ),
            returnValue: _i6.Future<_i2.Response<dynamic>>.value(
              _FakeResponse_0<dynamic>(
                this,
                Invocation.method(
                  #put,
                  [url],
                  {
                    #queryParameters: queryParameters,
                    #options: options,
                    #data: data,
                  },
                ),
              ),
            ),
            returnValueForMissingStub: _i6.Future<_i2.Response<dynamic>>.value(
              _FakeResponse_0<dynamic>(
                this,
                Invocation.method(
                  #put,
                  [url],
                  {
                    #queryParameters: queryParameters,
                    #options: options,
                    #data: data,
                  },
                ),
              ),
            ),
          )
          as _i6.Future<_i2.Response<dynamic>>);

  @override
  _i6.Future<_i2.Response<dynamic>> delete(
    String? url, {
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #delete,
              [url],
              {
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
              },
            ),
            returnValue: _i6.Future<_i2.Response<dynamic>>.value(
              _FakeResponse_0<dynamic>(
                this,
                Invocation.method(
                  #delete,
                  [url],
                  {
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                  },
                ),
              ),
            ),
            returnValueForMissingStub: _i6.Future<_i2.Response<dynamic>>.value(
              _FakeResponse_0<dynamic>(
                this,
                Invocation.method(
                  #delete,
                  [url],
                  {
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                  },
                ),
              ),
            ),
          )
          as _i6.Future<_i2.Response<dynamic>>);
}

/// A class which mocks [NetworkInterceptor].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInterceptor extends _i1.Mock
    implements _i4.NetworkInterceptor {
  @override
  _i3.Logger get log =>
      (super.noSuchMethod(
            Invocation.getter(#log),
            returnValue: _FakeLogger_1(this, Invocation.getter(#log)),
            returnValueForMissingStub: _FakeLogger_1(
              this,
              Invocation.getter(#log),
            ),
          )
          as _i3.Logger);

  @override
  _i2.Dio get dio =>
      (super.noSuchMethod(
            Invocation.getter(#dio),
            returnValue: _FakeDio_2(this, Invocation.getter(#dio)),
            returnValueForMissingStub: _FakeDio_2(
              this,
              Invocation.getter(#dio),
            ),
          )
          as _i2.Dio);

  @override
  _i4.NetworkRequestRetrier get requestRetrier =>
      (super.noSuchMethod(
            Invocation.getter(#requestRetrier),
            returnValue: _FakeNetworkRequestRetrier_3(
              this,
              Invocation.getter(#requestRetrier),
            ),
            returnValueForMissingStub: _FakeNetworkRequestRetrier_3(
              this,
              Invocation.getter(#requestRetrier),
            ),
          )
          as _i4.NetworkRequestRetrier);

  @override
  set dio(_i2.Dio? _dio) => super.noSuchMethod(
    Invocation.setter(#dio, _dio),
    returnValueForMissingStub: null,
  );

  @override
  void onRequest(
    _i2.RequestOptions? options,
    _i2.RequestInterceptorHandler? handler,
  ) => super.noSuchMethod(
    Invocation.method(#onRequest, [options, handler]),
    returnValueForMissingStub: null,
  );

  @override
  void onResponse(
    _i2.Response<dynamic>? response,
    _i2.ResponseInterceptorHandler? handler,
  ) => super.noSuchMethod(
    Invocation.method(#onResponse, [response, handler]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(_i2.DioException? err, _i2.ErrorInterceptorHandler? handler) =>
      super.noSuchMethod(
        Invocation.method(#onError, [err, handler]),
        returnValueForMissingStub: null,
      );

  @override
  bool isBadRequest(_i2.DioException? err) =>
      (super.noSuchMethod(
            Invocation.method(#isBadRequest, [err]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool isUnauthorized(_i2.DioException? err) =>
      (super.noSuchMethod(
            Invocation.method(#isUnauthorized, [err]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool isForbidden(_i2.DioException? err) =>
      (super.noSuchMethod(
            Invocation.method(#isForbidden, [err]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool isNotFound(_i2.DioException? err) =>
      (super.noSuchMethod(
            Invocation.method(#isNotFound, [err]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool isConnectionError(_i2.DioException? err) =>
      (super.noSuchMethod(
            Invocation.method(#isConnectionError, [err]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool isUnknownError(_i2.DioException? err) =>
      (super.noSuchMethod(
            Invocation.method(#isUnknownError, [err]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);
}

/// A class which mocks [NetworkRequestRetrier].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkRequestRetrier extends _i1.Mock
    implements _i4.NetworkRequestRetrier {
  @override
  _i2.Dio get dio =>
      (super.noSuchMethod(
            Invocation.getter(#dio),
            returnValue: _FakeDio_2(this, Invocation.getter(#dio)),
            returnValueForMissingStub: _FakeDio_2(
              this,
              Invocation.getter(#dio),
            ),
          )
          as _i2.Dio);

  @override
  _i5.InternetConnectionChecker get internetConnectionChecker =>
      (super.noSuchMethod(
            Invocation.getter(#internetConnectionChecker),
            returnValue: _FakeInternetConnectionChecker_4(
              this,
              Invocation.getter(#internetConnectionChecker),
            ),
            returnValueForMissingStub: _FakeInternetConnectionChecker_4(
              this,
              Invocation.getter(#internetConnectionChecker),
            ),
          )
          as _i5.InternetConnectionChecker);

  @override
  _i6.Future<_i2.Response<dynamic>> retryRequest(
    _i2.RequestOptions? requestOptions,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#retryRequest, [requestOptions]),
            returnValue: _i6.Future<_i2.Response<dynamic>>.value(
              _FakeResponse_0<dynamic>(
                this,
                Invocation.method(#retryRequest, [requestOptions]),
              ),
            ),
            returnValueForMissingStub: _i6.Future<_i2.Response<dynamic>>.value(
              _FakeResponse_0<dynamic>(
                this,
                Invocation.method(#retryRequest, [requestOptions]),
              ),
            ),
          )
          as _i6.Future<_i2.Response<dynamic>>);
}

/// A class which mocks [IsolateParser].
///
/// See the documentation for Mockito's code generation for more information.
class MockIsolateParser<T> extends _i1.Mock implements _i4.IsolateParser<T> {
  @override
  Map<String, dynamic> get json =>
      (super.noSuchMethod(
            Invocation.getter(#json),
            returnValue: <String, dynamic>{},
            returnValueForMissingStub: <String, dynamic>{},
          )
          as Map<String, dynamic>);

  @override
  _i4.ResponseConverter<T> get converter =>
      (super.noSuchMethod(
            Invocation.getter(#converter),
            returnValue: (Map<String, dynamic> json) =>
                _i8.dummyValue<T>(this, Invocation.getter(#converter)),
            returnValueForMissingStub: (Map<String, dynamic> json) =>
                _i8.dummyValue<T>(this, Invocation.getter(#converter)),
          )
          as _i4.ResponseConverter<T>);

  @override
  _i6.Future<T> parseInBackground() =>
      (super.noSuchMethod(
            Invocation.method(#parseInBackground, []),
            returnValue:
                _i8.ifNotNull(
                  _i8.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#parseInBackground, []),
                  ),
                  (T v) => _i6.Future<T>.value(v),
                ) ??
                _FakeFuture_5<T>(
                  this,
                  Invocation.method(#parseInBackground, []),
                ),
            returnValueForMissingStub:
                _i8.ifNotNull(
                  _i8.dummyValueOrNull<T>(
                    this,
                    Invocation.method(#parseInBackground, []),
                  ),
                  (T v) => _i6.Future<T>.value(v),
                ) ??
                _FakeFuture_5<T>(
                  this,
                  Invocation.method(#parseInBackground, []),
                ),
          )
          as _i6.Future<T>);
}

/// A class which mocks [Dio].
///
/// See the documentation for Mockito's code generation for more information.
class MockDio extends _i1.Mock implements _i2.Dio {
  @override
  _i2.BaseOptions get options =>
      (super.noSuchMethod(
            Invocation.getter(#options),
            returnValue: _FakeBaseOptions_6(this, Invocation.getter(#options)),
            returnValueForMissingStub: _FakeBaseOptions_6(
              this,
              Invocation.getter(#options),
            ),
          )
          as _i2.BaseOptions);

  @override
  _i2.HttpClientAdapter get httpClientAdapter =>
      (super.noSuchMethod(
            Invocation.getter(#httpClientAdapter),
            returnValue: _FakeHttpClientAdapter_7(
              this,
              Invocation.getter(#httpClientAdapter),
            ),
            returnValueForMissingStub: _FakeHttpClientAdapter_7(
              this,
              Invocation.getter(#httpClientAdapter),
            ),
          )
          as _i2.HttpClientAdapter);

  @override
  _i2.Transformer get transformer =>
      (super.noSuchMethod(
            Invocation.getter(#transformer),
            returnValue: _FakeTransformer_8(
              this,
              Invocation.getter(#transformer),
            ),
            returnValueForMissingStub: _FakeTransformer_8(
              this,
              Invocation.getter(#transformer),
            ),
          )
          as _i2.Transformer);

  @override
  _i2.Interceptors get interceptors =>
      (super.noSuchMethod(
            Invocation.getter(#interceptors),
            returnValue: _FakeInterceptors_9(
              this,
              Invocation.getter(#interceptors),
            ),
            returnValueForMissingStub: _FakeInterceptors_9(
              this,
              Invocation.getter(#interceptors),
            ),
          )
          as _i2.Interceptors);

  @override
  set options(_i2.BaseOptions? _options) => super.noSuchMethod(
    Invocation.setter(#options, _options),
    returnValueForMissingStub: null,
  );

  @override
  set httpClientAdapter(_i2.HttpClientAdapter? _httpClientAdapter) =>
      super.noSuchMethod(
        Invocation.setter(#httpClientAdapter, _httpClientAdapter),
        returnValueForMissingStub: null,
      );

  @override
  set transformer(_i2.Transformer? _transformer) => super.noSuchMethod(
    Invocation.setter(#transformer, _transformer),
    returnValueForMissingStub: null,
  );

  @override
  void close({bool? force = false}) => super.noSuchMethod(
    Invocation.method(#close, [], {#force: force}),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<_i2.Response<T>> head<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #head,
              [path],
              {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
              },
            ),
            returnValue: _i6.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #head,
                  [path],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                  },
                ),
              ),
            ),
            returnValueForMissingStub: _i6.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #head,
                  [path],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                  },
                ),
              ),
            ),
          )
          as _i6.Future<_i2.Response<T>>);

  @override
  _i6.Future<_i2.Response<T>> headUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #headUri,
              [uri],
              {#data: data, #options: options, #cancelToken: cancelToken},
            ),
            returnValue: _i6.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #headUri,
                  [uri],
                  {#data: data, #options: options, #cancelToken: cancelToken},
                ),
              ),
            ),
            returnValueForMissingStub: _i6.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #headUri,
                  [uri],
                  {#data: data, #options: options, #cancelToken: cancelToken},
                ),
              ),
            ),
          )
          as _i6.Future<_i2.Response<T>>);

  @override
  _i6.Future<_i2.Response<T>> get<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #get,
              [path],
              {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
                #onReceiveProgress: onReceiveProgress,
              },
            ),
            returnValue: _i6.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #get,
                  [path],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
            returnValueForMissingStub: _i6.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #get,
                  [path],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
          )
          as _i6.Future<_i2.Response<T>>);

  @override
  _i6.Future<_i2.Response<T>> getUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #getUri,
              [uri],
              {
                #data: data,
                #options: options,
                #cancelToken: cancelToken,
                #onReceiveProgress: onReceiveProgress,
              },
            ),
            returnValue: _i6.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #getUri,
                  [uri],
                  {
                    #data: data,
                    #options: options,
                    #cancelToken: cancelToken,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
            returnValueForMissingStub: _i6.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #getUri,
                  [uri],
                  {
                    #data: data,
                    #options: options,
                    #cancelToken: cancelToken,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
          )
          as _i6.Future<_i2.Response<T>>);

  @override
  _i6.Future<_i2.Response<T>> post<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #post,
              [path],
              {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress,
              },
            ),
            returnValue: _i6.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #post,
                  [path],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                    #onSendProgress: onSendProgress,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
            returnValueForMissingStub: _i6.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #post,
                  [path],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                    #onSendProgress: onSendProgress,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
          )
          as _i6.Future<_i2.Response<T>>);

  @override
  _i6.Future<_i2.Response<T>> postUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #postUri,
              [uri],
              {
                #data: data,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress,
              },
            ),
            returnValue: _i6.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #postUri,
                  [uri],
                  {
                    #data: data,
                    #options: options,
                    #cancelToken: cancelToken,
                    #onSendProgress: onSendProgress,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
            returnValueForMissingStub: _i6.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #postUri,
                  [uri],
                  {
                    #data: data,
                    #options: options,
                    #cancelToken: cancelToken,
                    #onSendProgress: onSendProgress,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
          )
          as _i6.Future<_i2.Response<T>>);

  @override
  _i6.Future<_i2.Response<T>> put<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #put,
              [path],
              {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress,
              },
            ),
            returnValue: _i6.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #put,
                  [path],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                    #onSendProgress: onSendProgress,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
            returnValueForMissingStub: _i6.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #put,
                  [path],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                    #onSendProgress: onSendProgress,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
          )
          as _i6.Future<_i2.Response<T>>);

  @override
  _i6.Future<_i2.Response<T>> putUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #putUri,
              [uri],
              {
                #data: data,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress,
              },
            ),
            returnValue: _i6.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #putUri,
                  [uri],
                  {
                    #data: data,
                    #options: options,
                    #cancelToken: cancelToken,
                    #onSendProgress: onSendProgress,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
            returnValueForMissingStub: _i6.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #putUri,
                  [uri],
                  {
                    #data: data,
                    #options: options,
                    #cancelToken: cancelToken,
                    #onSendProgress: onSendProgress,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
          )
          as _i6.Future<_i2.Response<T>>);

  @override
  _i6.Future<_i2.Response<T>> patch<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #patch,
              [path],
              {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress,
              },
            ),
            returnValue: _i6.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #patch,
                  [path],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                    #onSendProgress: onSendProgress,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
            returnValueForMissingStub: _i6.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #patch,
                  [path],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                    #onSendProgress: onSendProgress,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
          )
          as _i6.Future<_i2.Response<T>>);

  @override
  _i6.Future<_i2.Response<T>> patchUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #patchUri,
              [uri],
              {
                #data: data,
                #options: options,
                #cancelToken: cancelToken,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress,
              },
            ),
            returnValue: _i6.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #patchUri,
                  [uri],
                  {
                    #data: data,
                    #options: options,
                    #cancelToken: cancelToken,
                    #onSendProgress: onSendProgress,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
            returnValueForMissingStub: _i6.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #patchUri,
                  [uri],
                  {
                    #data: data,
                    #options: options,
                    #cancelToken: cancelToken,
                    #onSendProgress: onSendProgress,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
          )
          as _i6.Future<_i2.Response<T>>);

  @override
  _i6.Future<_i2.Response<T>> delete<T>(
    String? path, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #delete,
              [path],
              {
                #data: data,
                #queryParameters: queryParameters,
                #options: options,
                #cancelToken: cancelToken,
              },
            ),
            returnValue: _i6.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #delete,
                  [path],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                  },
                ),
              ),
            ),
            returnValueForMissingStub: _i6.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #delete,
                  [path],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #options: options,
                    #cancelToken: cancelToken,
                  },
                ),
              ),
            ),
          )
          as _i6.Future<_i2.Response<T>>);

  @override
  _i6.Future<_i2.Response<T>> deleteUri<T>(
    Uri? uri, {
    Object? data,
    _i2.Options? options,
    _i2.CancelToken? cancelToken,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #deleteUri,
              [uri],
              {#data: data, #options: options, #cancelToken: cancelToken},
            ),
            returnValue: _i6.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #deleteUri,
                  [uri],
                  {#data: data, #options: options, #cancelToken: cancelToken},
                ),
              ),
            ),
            returnValueForMissingStub: _i6.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #deleteUri,
                  [uri],
                  {#data: data, #options: options, #cancelToken: cancelToken},
                ),
              ),
            ),
          )
          as _i6.Future<_i2.Response<T>>);

  @override
  _i6.Future<_i2.Response<dynamic>> download(
    String? urlPath,
    dynamic savePath, {
    _i2.ProgressCallback? onReceiveProgress,
    Map<String, dynamic>? queryParameters,
    _i2.CancelToken? cancelToken,
    bool? deleteOnError = true,
    _i2.FileAccessMode? fileAccessMode = _i2.FileAccessMode.write,
    String? lengthHeader = 'content-length',
    Object? data,
    _i2.Options? options,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #download,
              [urlPath, savePath],
              {
                #onReceiveProgress: onReceiveProgress,
                #queryParameters: queryParameters,
                #cancelToken: cancelToken,
                #deleteOnError: deleteOnError,
                #fileAccessMode: fileAccessMode,
                #lengthHeader: lengthHeader,
                #data: data,
                #options: options,
              },
            ),
            returnValue: _i6.Future<_i2.Response<dynamic>>.value(
              _FakeResponse_0<dynamic>(
                this,
                Invocation.method(
                  #download,
                  [urlPath, savePath],
                  {
                    #onReceiveProgress: onReceiveProgress,
                    #queryParameters: queryParameters,
                    #cancelToken: cancelToken,
                    #deleteOnError: deleteOnError,
                    #fileAccessMode: fileAccessMode,
                    #lengthHeader: lengthHeader,
                    #data: data,
                    #options: options,
                  },
                ),
              ),
            ),
            returnValueForMissingStub: _i6.Future<_i2.Response<dynamic>>.value(
              _FakeResponse_0<dynamic>(
                this,
                Invocation.method(
                  #download,
                  [urlPath, savePath],
                  {
                    #onReceiveProgress: onReceiveProgress,
                    #queryParameters: queryParameters,
                    #cancelToken: cancelToken,
                    #deleteOnError: deleteOnError,
                    #fileAccessMode: fileAccessMode,
                    #lengthHeader: lengthHeader,
                    #data: data,
                    #options: options,
                  },
                ),
              ),
            ),
          )
          as _i6.Future<_i2.Response<dynamic>>);

  @override
  _i6.Future<_i2.Response<dynamic>> downloadUri(
    Uri? uri,
    dynamic savePath, {
    _i2.ProgressCallback? onReceiveProgress,
    _i2.CancelToken? cancelToken,
    bool? deleteOnError = true,
    _i2.FileAccessMode? fileAccessMode = _i2.FileAccessMode.write,
    String? lengthHeader = 'content-length',
    Object? data,
    _i2.Options? options,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #downloadUri,
              [uri, savePath],
              {
                #onReceiveProgress: onReceiveProgress,
                #cancelToken: cancelToken,
                #deleteOnError: deleteOnError,
                #fileAccessMode: fileAccessMode,
                #lengthHeader: lengthHeader,
                #data: data,
                #options: options,
              },
            ),
            returnValue: _i6.Future<_i2.Response<dynamic>>.value(
              _FakeResponse_0<dynamic>(
                this,
                Invocation.method(
                  #downloadUri,
                  [uri, savePath],
                  {
                    #onReceiveProgress: onReceiveProgress,
                    #cancelToken: cancelToken,
                    #deleteOnError: deleteOnError,
                    #fileAccessMode: fileAccessMode,
                    #lengthHeader: lengthHeader,
                    #data: data,
                    #options: options,
                  },
                ),
              ),
            ),
            returnValueForMissingStub: _i6.Future<_i2.Response<dynamic>>.value(
              _FakeResponse_0<dynamic>(
                this,
                Invocation.method(
                  #downloadUri,
                  [uri, savePath],
                  {
                    #onReceiveProgress: onReceiveProgress,
                    #cancelToken: cancelToken,
                    #deleteOnError: deleteOnError,
                    #fileAccessMode: fileAccessMode,
                    #lengthHeader: lengthHeader,
                    #data: data,
                    #options: options,
                  },
                ),
              ),
            ),
          )
          as _i6.Future<_i2.Response<dynamic>>);

  @override
  _i6.Future<_i2.Response<T>> request<T>(
    String? url, {
    Object? data,
    Map<String, dynamic>? queryParameters,
    _i2.CancelToken? cancelToken,
    _i2.Options? options,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #request,
              [url],
              {
                #data: data,
                #queryParameters: queryParameters,
                #cancelToken: cancelToken,
                #options: options,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress,
              },
            ),
            returnValue: _i6.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #request,
                  [url],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #cancelToken: cancelToken,
                    #options: options,
                    #onSendProgress: onSendProgress,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
            returnValueForMissingStub: _i6.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #request,
                  [url],
                  {
                    #data: data,
                    #queryParameters: queryParameters,
                    #cancelToken: cancelToken,
                    #options: options,
                    #onSendProgress: onSendProgress,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
          )
          as _i6.Future<_i2.Response<T>>);

  @override
  _i6.Future<_i2.Response<T>> requestUri<T>(
    Uri? uri, {
    Object? data,
    _i2.CancelToken? cancelToken,
    _i2.Options? options,
    _i2.ProgressCallback? onSendProgress,
    _i2.ProgressCallback? onReceiveProgress,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #requestUri,
              [uri],
              {
                #data: data,
                #cancelToken: cancelToken,
                #options: options,
                #onSendProgress: onSendProgress,
                #onReceiveProgress: onReceiveProgress,
              },
            ),
            returnValue: _i6.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #requestUri,
                  [uri],
                  {
                    #data: data,
                    #cancelToken: cancelToken,
                    #options: options,
                    #onSendProgress: onSendProgress,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
            returnValueForMissingStub: _i6.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(
                  #requestUri,
                  [uri],
                  {
                    #data: data,
                    #cancelToken: cancelToken,
                    #options: options,
                    #onSendProgress: onSendProgress,
                    #onReceiveProgress: onReceiveProgress,
                  },
                ),
              ),
            ),
          )
          as _i6.Future<_i2.Response<T>>);

  @override
  _i6.Future<_i2.Response<T>> fetch<T>(_i2.RequestOptions? requestOptions) =>
      (super.noSuchMethod(
            Invocation.method(#fetch, [requestOptions]),
            returnValue: _i6.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(#fetch, [requestOptions]),
              ),
            ),
            returnValueForMissingStub: _i6.Future<_i2.Response<T>>.value(
              _FakeResponse_0<T>(
                this,
                Invocation.method(#fetch, [requestOptions]),
              ),
            ),
          )
          as _i6.Future<_i2.Response<T>>);

  @override
  _i2.Dio clone({
    _i2.BaseOptions? options,
    _i2.Interceptors? interceptors,
    _i2.HttpClientAdapter? httpClientAdapter,
    _i2.Transformer? transformer,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#clone, [], {
              #options: options,
              #interceptors: interceptors,
              #httpClientAdapter: httpClientAdapter,
              #transformer: transformer,
            }),
            returnValue: _FakeDio_2(
              this,
              Invocation.method(#clone, [], {
                #options: options,
                #interceptors: interceptors,
                #httpClientAdapter: httpClientAdapter,
                #transformer: transformer,
              }),
            ),
            returnValueForMissingStub: _FakeDio_2(
              this,
              Invocation.method(#clone, [], {
                #options: options,
                #interceptors: interceptors,
                #httpClientAdapter: httpClientAdapter,
                #transformer: transformer,
              }),
            ),
          )
          as _i2.Dio);
}

/// A class which mocks [InternetConnectionChecker].
///
/// See the documentation for Mockito's code generation for more information.
class MockInternetConnectionChecker extends _i1.Mock
    implements _i5.InternetConnectionChecker {
  @override
  bool get requireAllAddressesToRespond =>
      (super.noSuchMethod(
            Invocation.getter(#requireAllAddressesToRespond),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get enableToCheckForSlowConnection =>
      (super.noSuchMethod(
            Invocation.getter(#enableToCheckForSlowConnection),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  Duration get slowConnectionThreshold =>
      (super.noSuchMethod(
            Invocation.getter(#slowConnectionThreshold),
            returnValue: _FakeDuration_10(
              this,
              Invocation.getter(#slowConnectionThreshold),
            ),
            returnValueForMissingStub: _FakeDuration_10(
              this,
              Invocation.getter(#slowConnectionThreshold),
            ),
          )
          as Duration);

  @override
  Duration get checkTimeout =>
      (super.noSuchMethod(
            Invocation.getter(#checkTimeout),
            returnValue: _FakeDuration_10(
              this,
              Invocation.getter(#checkTimeout),
            ),
            returnValueForMissingStub: _FakeDuration_10(
              this,
              Invocation.getter(#checkTimeout),
            ),
          )
          as Duration);

  @override
  Duration get checkInterval =>
      (super.noSuchMethod(
            Invocation.getter(#checkInterval),
            returnValue: _FakeDuration_10(
              this,
              Invocation.getter(#checkInterval),
            ),
            returnValueForMissingStub: _FakeDuration_10(
              this,
              Invocation.getter(#checkInterval),
            ),
          )
          as Duration);

  @override
  List<_i5.AddressCheckOption> get addresses =>
      (super.noSuchMethod(
            Invocation.getter(#addresses),
            returnValue: <_i5.AddressCheckOption>[],
            returnValueForMissingStub: <_i5.AddressCheckOption>[],
          )
          as List<_i5.AddressCheckOption>);

  @override
  _i6.Stream<_i5.InternetConnectionStatus> get onStatusChange =>
      (super.noSuchMethod(
            Invocation.getter(#onStatusChange),
            returnValue: _i6.Stream<_i5.InternetConnectionStatus>.empty(),
            returnValueForMissingStub:
                _i6.Stream<_i5.InternetConnectionStatus>.empty(),
          )
          as _i6.Stream<_i5.InternetConnectionStatus>);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(
            Invocation.getter(#hasListeners),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i6.Future<bool> get hasConnection =>
      (super.noSuchMethod(
            Invocation.getter(#hasConnection),
            returnValue: _i6.Future<bool>.value(false),
            returnValueForMissingStub: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<_i5.InternetConnectionStatus> get connectionStatus =>
      (super.noSuchMethod(
            Invocation.getter(#connectionStatus),
            returnValue: _i6.Future<_i5.InternetConnectionStatus>.value(
              _i5.InternetConnectionStatus.connected,
            ),
            returnValueForMissingStub:
                _i6.Future<_i5.InternetConnectionStatus>.value(
                  _i5.InternetConnectionStatus.connected,
                ),
          )
          as _i6.Future<_i5.InternetConnectionStatus>);

  @override
  set requireAllAddressesToRespond(bool? _requireAllAddressesToRespond) =>
      super.noSuchMethod(
        Invocation.setter(
          #requireAllAddressesToRespond,
          _requireAllAddressesToRespond,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set enableToCheckForSlowConnection(bool? _enableToCheckForSlowConnection) =>
      super.noSuchMethod(
        Invocation.setter(
          #enableToCheckForSlowConnection,
          _enableToCheckForSlowConnection,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set slowConnectionThreshold(Duration? _slowConnectionThreshold) =>
      super.noSuchMethod(
        Invocation.setter(#slowConnectionThreshold, _slowConnectionThreshold),
        returnValueForMissingStub: null,
      );

  @override
  set checkTimeout(Duration? _checkTimeout) => super.noSuchMethod(
    Invocation.setter(#checkTimeout, _checkTimeout),
    returnValueForMissingStub: null,
  );

  @override
  set checkInterval(Duration? _checkInterval) => super.noSuchMethod(
    Invocation.setter(#checkInterval, _checkInterval),
    returnValueForMissingStub: null,
  );

  @override
  set addresses(List<_i5.AddressCheckOption>? value) => super.noSuchMethod(
    Invocation.setter(#addresses, value),
    returnValueForMissingStub: null,
  );

  @override
  set setLastStatus(_i5.InternetConnectionStatus? status) => super.noSuchMethod(
    Invocation.setter(#setLastStatus, status),
    returnValueForMissingStub: null,
  );

  @override
  set setRequireAllAddressesToRespond(bool? value) => super.noSuchMethod(
    Invocation.setter(#setRequireAllAddressesToRespond, value),
    returnValueForMissingStub: null,
  );

  @override
  Iterable<_i6.Future<_i5.AddressCheckResult>> createAddressCheckFutures(
    List<_i5.AddressCheckOption>? addresses,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createAddressCheckFutures, [addresses]),
            returnValue: <_i6.Future<_i5.AddressCheckResult>>[],
            returnValueForMissingStub: <_i6.Future<_i5.AddressCheckResult>>[],
          )
          as Iterable<_i6.Future<_i5.AddressCheckResult>>);

  @override
  _i6.Future<bool> checkConnectivity() =>
      (super.noSuchMethod(
            Invocation.method(#checkConnectivity, []),
            returnValue: _i6.Future<bool>.value(false),
            returnValueForMissingStub: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  _i6.Future<_i5.AddressCheckResult> isHostReachable(
    _i5.AddressCheckOption? option,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#isHostReachable, [option]),
            returnValue: _i6.Future<_i5.AddressCheckResult>.value(
              _FakeAddressCheckResult_11(
                this,
                Invocation.method(#isHostReachable, [option]),
              ),
            ),
            returnValueForMissingStub: _i6.Future<_i5.AddressCheckResult>.value(
              _FakeAddressCheckResult_11(
                this,
                Invocation.method(#isHostReachable, [option]),
              ),
            ),
          )
          as _i6.Future<_i5.AddressCheckResult>);

  @override
  _i6.Future<void> maybeEmitStatusUpdate({
    _i6.Timer? timer,
    Function? cancelCallback,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#maybeEmitStatusUpdate, [], {
              #timer: timer,
              #cancelCallback: cancelCallback,
            }),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void emitStatus(_i5.InternetConnectionStatus? newStatus) =>
      super.noSuchMethod(
        Invocation.method(#emitStatus, [newStatus]),
        returnValueForMissingStub: null,
      );

  @override
  void startMonitoring() => super.noSuchMethod(
    Invocation.method(#startMonitoring, []),
    returnValueForMissingStub: null,
  );

  @override
  void cancelStatusUpdate() => super.noSuchMethod(
    Invocation.method(#cancelStatusUpdate, []),
    returnValueForMissingStub: null,
  );

  @override
  void configure({
    Duration? timeout,
    Duration? interval,
    List<_i5.AddressCheckOption>? addresses,
    _i5.SlowConnectionConfig? slowConnectionConfig,
  }) => super.noSuchMethod(
    Invocation.method(#configure, [], {
      #timeout: timeout,
      #interval: interval,
      #addresses: addresses,
      #slowConnectionConfig: slowConnectionConfig,
    }),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [RequestInterceptorHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockRequestInterceptorHandler extends _i1.Mock
    implements _i2.RequestInterceptorHandler {
  @override
  _i6.Future<_i7.InterceptorState<dynamic>> get future =>
      (super.noSuchMethod(
            Invocation.getter(#future),
            returnValue: _i6.Future<_i7.InterceptorState<dynamic>>.value(
              _FakeInterceptorState_12<dynamic>(
                this,
                Invocation.getter(#future),
              ),
            ),
            returnValueForMissingStub:
                _i6.Future<_i7.InterceptorState<dynamic>>.value(
                  _FakeInterceptorState_12<dynamic>(
                    this,
                    Invocation.getter(#future),
                  ),
                ),
          )
          as _i6.Future<_i7.InterceptorState<dynamic>>);

  @override
  bool get isCompleted =>
      (super.noSuchMethod(
            Invocation.getter(#isCompleted),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void next(_i2.RequestOptions? requestOptions) => super.noSuchMethod(
    Invocation.method(#next, [requestOptions]),
    returnValueForMissingStub: null,
  );

  @override
  void resolve(
    _i2.Response<dynamic>? response, [
    bool? callFollowingResponseInterceptor = false,
  ]) => super.noSuchMethod(
    Invocation.method(#resolve, [response, callFollowingResponseInterceptor]),
    returnValueForMissingStub: null,
  );

  @override
  void reject(
    _i2.DioException? error, [
    bool? callFollowingErrorInterceptor = false,
  ]) => super.noSuchMethod(
    Invocation.method(#reject, [error, callFollowingErrorInterceptor]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [ResponseInterceptorHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockResponseInterceptorHandler extends _i1.Mock
    implements _i2.ResponseInterceptorHandler {
  @override
  _i6.Future<_i7.InterceptorState<dynamic>> get future =>
      (super.noSuchMethod(
            Invocation.getter(#future),
            returnValue: _i6.Future<_i7.InterceptorState<dynamic>>.value(
              _FakeInterceptorState_12<dynamic>(
                this,
                Invocation.getter(#future),
              ),
            ),
            returnValueForMissingStub:
                _i6.Future<_i7.InterceptorState<dynamic>>.value(
                  _FakeInterceptorState_12<dynamic>(
                    this,
                    Invocation.getter(#future),
                  ),
                ),
          )
          as _i6.Future<_i7.InterceptorState<dynamic>>);

  @override
  bool get isCompleted =>
      (super.noSuchMethod(
            Invocation.getter(#isCompleted),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void next(_i2.Response<dynamic>? response) => super.noSuchMethod(
    Invocation.method(#next, [response]),
    returnValueForMissingStub: null,
  );

  @override
  void resolve(_i2.Response<dynamic>? response) => super.noSuchMethod(
    Invocation.method(#resolve, [response]),
    returnValueForMissingStub: null,
  );

  @override
  void reject(
    _i2.DioException? error, [
    bool? callFollowingErrorInterceptor = false,
  ]) => super.noSuchMethod(
    Invocation.method(#reject, [error, callFollowingErrorInterceptor]),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [ErrorInterceptorHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockErrorInterceptorHandler extends _i1.Mock
    implements _i2.ErrorInterceptorHandler {
  @override
  _i6.Future<_i7.InterceptorState<dynamic>> get future =>
      (super.noSuchMethod(
            Invocation.getter(#future),
            returnValue: _i6.Future<_i7.InterceptorState<dynamic>>.value(
              _FakeInterceptorState_12<dynamic>(
                this,
                Invocation.getter(#future),
              ),
            ),
            returnValueForMissingStub:
                _i6.Future<_i7.InterceptorState<dynamic>>.value(
                  _FakeInterceptorState_12<dynamic>(
                    this,
                    Invocation.getter(#future),
                  ),
                ),
          )
          as _i6.Future<_i7.InterceptorState<dynamic>>);

  @override
  bool get isCompleted =>
      (super.noSuchMethod(
            Invocation.getter(#isCompleted),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void next(_i2.DioException? error) => super.noSuchMethod(
    Invocation.method(#next, [error]),
    returnValueForMissingStub: null,
  );

  @override
  void resolve(_i2.Response<dynamic>? response) => super.noSuchMethod(
    Invocation.method(#resolve, [response]),
    returnValueForMissingStub: null,
  );

  @override
  void reject(_i2.DioException? error) => super.noSuchMethod(
    Invocation.method(#reject, [error]),
    returnValueForMissingStub: null,
  );
}
